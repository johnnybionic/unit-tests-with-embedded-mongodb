The development will be "bottom up" - from the data to the UI

1: get a sample JSON file, read each object in turn as a string, or something that be used with Spring's MongoTemplate.save() 
	- this article uses a similar approach, but requires separate objects per line : http://dontpanic.42.nl/2015/02/in-memory-mongodb-for-unit-and.html
2: get the sample data into an embedded instance
	- not using a fake or mocked DB - it's a real database 
	- an additional step here was to provide a converter that creates CoffeeShop instances from entries in the DB
3: create a DAO to find the nearest coffee shop by location
	- use the MongoDB driver directly
	- an an extra, use MongoTemplate - switch between the two DAOs using profiles (may not be possible due to how Spring Data works with MongoDB)
	- this step also required a second converter, due to differences in versions of the MongoDB driver managed by Spring Boot
	  and the latest driver that the DAO uses
	- this step introduced a problem testing with profiles, see 'profile-problems.txt'
4: create a service that uses the DAO	
	- due to the issue with profiles, two services were created
5: create a controller that accepts ReST calls and brokers the service(s)
6: create a simple UI to invoke the controller
 

